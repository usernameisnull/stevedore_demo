# encoding: utf-8
# stevedore (1.15.0)
import testtools
import unittest
import tempfile
import base64_en_de
import os
import zipfile
import subprocess
import shutil
from stevedore.driver import DriverManager

# scheduler目录和setup.py -> scheduler.zip -> base64_en_de.encode_zip_to_string -> DATA

DATA = """
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
"""
TMPDIR = tempfile.mkdtemp(prefix='sora')
ZIP_FILE_NAME = 'scheduluer.zip'
EXPECT = 'in memoryscheduler...'


def unzip(source_filename, dest_dir):
    with zipfile.ZipFile(source_filename) as zf:
        zf.extractall(dest_dir)


def install_plugin():
    file_path = '%s%s%s' % (TMPDIR, os.sep, ZIP_FILE_NAME)
    base64_en_de.decode_string_to_zip(DATA, '\n', '', file_path)
    unzip(file_path, TMPDIR)
    cmd = 'python setup.py install'
    sub = subprocess.Popen(cmd.split(), stderr=subprocess.PIPE, stdout=subprocess.PIPE, cwd=TMPDIR)
    sub.wait()


def clear():
    shutil.rmtree(TMPDIR, ignore_errors=True)
    shutil.rmtree('/usr/local/lib/python2.7/dist-packages/sora_scheduler-1.0-py2.7.egg', ignore_errors=True)


class SampleTestCase(testtools.TestCase):
    def test_it(self):
        install_plugin()
        try:
            mgr = DriverManager(namespace='sora.scheduler', name='memorybase', invoke_on_load=True)
            dt = {13: 'id1', 324: 'id2', 434: 'id3', 'memory': [13, 324, 434]}
            result = mgr.driver.scheduler(dt)
        except Exception as exc_info:
            print '*' * 80
            print "When try to load plugin, errors happen,detail: %s" % str(exc_info)
            print '*' * 80
        finally:
            clear()
        self.assertEqual('id3', result)


if __name__ == '__main__':
    unittest.main()

